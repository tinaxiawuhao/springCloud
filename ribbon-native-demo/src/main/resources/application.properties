spring.application.name= ribbon-eureka-demo
server.port=8088

eureka.client.serviceUrl.defaultZone=http://yonghuming:123456@localhost:8761/eureka/
# 采用IP注册
eureka.instance.preferIpAddress=true
# 定义实例ID格式
eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}

#Eureka 控制台快速查看 Swagger 文档
#在服务很多的情况下，我们想通过 Eureka 中注册的实例信息，能够直接跳转到 API 文档页面，这个时候可以定义 Eureka 的 Page 地址。在 application.properties 中增加如下配置即可：
eureka.instance.status-page-url=http://${spring.cloud.client.ip-address}: ${server.port}/swagger-ui.html


# 开启 Ribbon 的饥饿加载模式。
ribbon.eager-load.enabled=true
# 指定需要饥饿加载的服务名，也就是你需要调用的服务，若有多个则用逗号隔开。
ribbon.eager-load.clients=ribbon-eureka-demo
# 自定义负载均衡策略
#ribbon-eureka-demo.ribbon.NFLoadBalancerRuleClassName=com.example.ribbonnativedemo.rule.MyRule

#<clientName>.ribbon.NFLoadBalancerClassName: Should implement ILoadBalancer(负载均衡器操作接口)
#<clientName>.ribbon.NFLoadBalancerRuleClassName: Should implement IRule(负载均衡算法)
#<clientName>.ribbon.NFLoadBalancerPingClassName: Should implement IPing(服务可用性检查)
#<clientName>.ribbon.NIWSServerListClassName: Should implement ServerList(服务列表获取)
#<clientName>.ribbon.NIWSServerListFilterClassName: Should implement ServerList­Filter(服务列表的过滤)

#当我们在 RestTemplate 上添加 @LoadBalanced 注解后，就可以用服务名称来调用接口了，当有多个服务的时候，还能做负载均衡。
#这是因为 Eureka 中的服务信息已经被拉取到了客户端本地，如果我们不想和 Eureka 集成，可以通过下面的配置方法将其禁用。
# 禁用 Eureka
#ribbon.eureka.enabled=false

#当我们禁用了 Eureka 之后，就不能使用服务名称去调用接口了，必须指定服务地址。
# 禁用 Eureka 后手动配置服务地址
#eureka-client-user-service.ribbon.listOfServers=localhost:8085,localhost:8086

#这个配置是针对具体服务的，前缀就是服务名称，配置完之后就可以和之前一样使用服务名称来调用接口了。


#也可以为每个Ribbon客户端设置不同的超时时间, 通过服务名称进行指定：
#ribbon-eureka-demo.ribbon.ConnectTimeout=2000
#ribbon-eureka-demo.ribbon.ReadTimeout=5000

# 最大连接数
ribbon.MaxTotalConnections=500
# 每个host最大连接数
ribbon.MaxConnectionsPerHost=500


#在集群环境中，用多个节点来提供服务，难免会有某个节点出现故障。用 Nginx 做负载均衡的时候，如果你的应用是无状态的、可以滚动发布的，也就是需要一台台去重启应用，这样对用户的影响其实是比较小的，因为 Nginx 在转发请求失败后会重新将该请求转发到别的实例上去。
#由于 Eureka 是基于 AP 原则构建的，牺牲了数据的一致性，每个 Eureka 服务都会保存注册的服务信息，当注册的客户端与 Eureka 的心跳无法保持时，有可能是网络原因，也有可能是服务挂掉了。
#在这种情况下，Eureka 中还会在一段时间内保存注册信息。这个时候客户端就有可能拿到已经挂掉了的服务信息，故 Ribbon 就有可能拿到已经失效了的服务信息，这样就会导致发生失败的请求。
#这种问题我们可以利用重试机制来避免。重试机制就是当 Ribbon 发现请求的服务不可到达时，重新请求另外的服务。
#解决上述问题，最简单的方法就是利用 Ribbon 自带的重试策略进行重试，此时只需要指定某个服务的负载策略为重试策略即可：
#ribbon-eureka-demo.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RetryRule

#通过集成 Spring Retry 来进行重试操作
#配置重试次数等信息：
# 请求连接的超时时间
ribbon.ConnectTimeout=2000
# 请求处理的超时时间
ribbon.ReadTimeout=5000
# 对当前实例的重试次数
ribbon.maxAutoRetries=1
# 切换实例的重试次数
ribbon.maxAutoRetriesNextServer=3
# 对所有操作请求都进行重试
ribbon.okToRetryOnAllOperations=true
# 对Http响应码进行重试
ribbon.retryableStatusCodes=500,404,502

# 在配置文件中执行 Client 的日志级别才能正常输出日志，格式是“logging.level.client 类地址=级别”。
logging.level.com.example.ribbonnativedemo.interfaces.UserRemoteClient=DEBUG

#修改配置，将 Feign 的 HttpClient 禁用，启用 OkHttp，配置如下：
#feign.httpclient.enabled=false
#feign.okhttp.enabled=true

#开启压缩可以有效节约网络资源，提升接口性能，我们可以配置 GZIP 来压缩数据：
feign.compression.request.enabled=true
feign.compression.response.enabled=true

#还可以配置压缩的类型、最小压缩值的标准：
feign.compression.request.mime-types=text/xml,application/xml,application/json
feign.compression.request.min-request-size=2048

# 链接超时时间
feign.client.config.feignName.connectTimeout=5000
# 读取超时时间
feign.client.config.feignName.readTimeout=5000
# 日志等级
feign.client.config.feignName.loggerLevel=full
# 重试
#feign.client.config.feignName.retryer=com.example.SimpleRetryer
# 拦截器
#feign.client.config.feignName.requestInterceptors[0]=com.example.FooRequestInterceptor
#feign.client.config.feignName.requestInterceptors[1]=com.example.BarRequestInterceptor
# 编码器
#feign.client.config.feignName.encoder=com.example.SimpleEncoder
# 解码器
#feign.client.config.feignName.decoder=com.example.SimpleDecoder
# 契约
#feign.client.config.feignName.contract=com.example.SimpleContract

